---
import Layout from '../../../layouts/Layout.astro';
import Hero from '../../../components/Hero.astro';
import { getCollection } from 'astro:content';
import { slugify } from '../../../utils/slugify';
import '../../../styles/blogStyles.css';

export async function getStaticPaths() {
  const POSTS_PER_PAGE = 10;
  const blogPosts = await getCollection('blog');
  const episodePosts = await getCollection('episodes');
  const allPosts = [...blogPosts, ...episodePosts];

  const tagMap = new Map<string, string>();
  for (const post of allPosts) {
    if (Array.isArray(post.data.tags)) {
      post.data.tags.forEach((tag: string) => {
        const slug = slugify(tag);
        tagMap.set(slug, tag);
      });
    }
  }

  const paths = [];
  for (const [slug, original] of tagMap.entries()) {
    const taggedPosts = allPosts.filter(
      post => Array.isArray(post.data.tags) && post.data.tags.includes(original)
    );
    const totalPages = Math.ceil(taggedPosts.length / POSTS_PER_PAGE);

    for (let i = 1; i <= totalPages; i++) {
      paths.push({
        params: { tag: slug, page: i.toString() }
      });
    }
  }

  return paths;
}

const tagSlug = Astro.params.tag;
const currentPage = Number(Astro.params.page) || 1;
const POSTS_PER_PAGE = 10;

const allPosts = [
  ...await getCollection('episodes'),
  ...await getCollection('blog')
];

// Map slug back to original tag name
const tagMap = new Map<string, string>();
for (const post of allPosts) {
  if (Array.isArray(post.data.tags)) {
    post.data.tags.forEach((t: string) => {
      tagMap.set(slugify(t), t);
    });
  }
}

const originalTag = tagMap.get(tagSlug) ?? tagSlug;

const taggedPosts = allPosts
  .filter(post => Array.isArray(post.data.tags) && post.data.tags.includes(originalTag))
  .sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());

const totalPages = Math.ceil(taggedPosts.length / POSTS_PER_PAGE);
const start = (currentPage - 1) * POSTS_PER_PAGE;
const end = start + POSTS_PER_PAGE;
const paginatedPosts = taggedPosts.slice(start, end);

const heroImage = `/images/tags/${tagSlug}.webp`;
---

<Layout title={`Tag: ${originalTag}`}>
  <main>
    <Hero 
      title={`Posts tagged with "${originalTag}"`} 
      background={heroImage}
    />

    <div class="content-container">
      <h1 class="tag-header">#{originalTag}</h1>
      {taggedPosts.length === 0 ? (
        <p>No posts found with this tag.</p>
      ) : (
        <div class="blog-list">
          {paginatedPosts.map(post => (
            <div class="blog-card">
              <a href={`/${post.collection}/${post.slug}/`}>
                <img src={post.data.image} alt={post.data.title} class="blog-card-image" />
              </a>
              <div class="blog-card-content">
                <a href={`/${post.collection}/${post.slug}/`}>
                  <h2 class="blog-card-title">{post.data.title}</h2>
                </a>
                <p class="blog-card-description">{post.data.description}</p>
                <a href={`/${post.collection}/${post.slug}/`}>
                  <p class="blog-card-date">{post.data.pubDate.toLocaleDateString()}</p>
                </a>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
    {totalPages > 1 && (
  <nav class="pagination">
    {Array.from({ length: totalPages }).map((_, i) => {
      const pageNum = i + 1;
      const isActive = pageNum === currentPage;
      const pageHref = `/tags/${tagSlug}/${pageNum}/`;

      return (
        <a href={pageHref} class={isActive ? 'active' : ''}>
          {pageNum}
        </a>
      );
    })}
  </nav>
)}

  </main>
</Layout>
