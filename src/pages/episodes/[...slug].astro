---
import Layout from "../../layouts/Layout.astro";
import { getEntry, getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import Hero from "../../components/Hero.astro";
import SEO from "../../components/SEO.astro";
import { slugify } from "../../utils/slugify";

const slug = Array.isArray(Astro.params.slug)
  ? Astro.params.slug.join("/")
  : Astro.params.slug;

const episode = await getEntry("episodes", slug);

if (!episode) {
  throw new Error(`Episode not found for slug: ${slug}`);
}

const { Content } = await episode.render();

export async function getStaticPaths() {
  const posts = (await getCollection(
    "episodes"
  )) as CollectionEntry<"episodes">[];

  return posts.map((post) => ({
    params: {
      slug: post.slug, // ← MUST be a string!
    },
  }));
}

const allEpisodes = (await getCollection("episodes")) as CollectionEntry<"episodes">[];

// Sort by date descending (newest first)
allEpisodes.sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());

// Find current index
const currentIndex = allEpisodes.findIndex((p) => p.slug === episode.slug);

const newerEpisode = allEpisodes[currentIndex - 1];
const olderEpisode = allEpisodes[currentIndex + 1];
---

<Layout>
  <Fragment slot="head">
    <SEO
      title={episode.data.title}
      description={episode.data.description}
      image={episode.data.image}
      pubDate={episode.data.pubDate}
      canonicalUrl={`/episodes/${episode.slug}`}
    />
    <link rel="stylesheet" href="/css/blogStyles.css" />
  </Fragment>
  <main>
    <Hero title={episode.data.title} background={episode.data.image} />
    <div class="content-container-blog">
      <div class="rich-content">
        <h1 class="post-title">{episode.data.title}</h1>
        <p class="date-published">
          {episode.data.pubDate.toLocaleDateString()}
        </p>

        <article>
          <Content />
        </article>
        {episode.data.tags && episode.data.tags.length > 0 && (
          <div class="post-tags">
            <h3>Tags:</h3>
            <div class="tag-list">
              {episode.data.tags.map((tag: string) => (
                <a href={`/tags/${slugify(tag)}/`} rel="tag">#{tag}</a>
              ))}
            </div>
          </div>
        )}
        <nav class="post-navigation">
          <div class="nav-col">
            {newerEpisode && (
              <a href={`/episodes/${newerEpisode.slug}`} class="nav-link newer">
                <span class="nav-label">← Newer Episode</span>
                <span class="nav-title">{newerEpisode.data.title}</span>
              </a>
            )}
          </div>
          <div class="nav-col">
            {olderEpisode && (
              <a href={`/episodes/${olderEpisode.slug}`} class="nav-link older">
                <span class="nav-label">Older Episode →</span>
                <span class="nav-title">{olderEpisode.data.title}</span>
              </a>
            )}
          </div>
        </nav>
      </div>
    </div>
  </main>
</Layout>
