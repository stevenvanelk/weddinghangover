---
import Layout from '../../layouts/Layout.astro';
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import HeroImg from '../../components/HeroImg.astro';
import { Image } from 'astro:assets';
import heroImg from '../../images/episodes/wph-podcast-hero.webp';

export async function getStaticPaths() {
  const POSTS_PER_PAGE = 10;
  const allEpisodes = await getCollection('episodes');
  const totalPages = Math.ceil(allEpisodes.length / POSTS_PER_PAGE);

  return Array.from({ length: totalPages }, (_, i) => ({
    params: { page: (i + 1).toString() },
  }));
}

const POSTS_PER_PAGE = 10;
const pageParam = Astro.params.page;
const currentPage = Number(pageParam) || 1;

const allEpisodes = await getCollection('episodes');
for (const ep of allEpisodes) {
  if (typeof ep.id !== "string") {
    console.error("❌ Invalid ep.id:", ep.id, "TYPE:", typeof ep.id);
    throw new Error("Invalid ep.id: not a string");
  }
  if (typeof ep.slug !== "string") {
    console.error("❌ Invalid ep.slug:", ep.slug, "TYPE:", typeof ep.slug);
    throw new Error("Invalid ep.slug: not a string");
  }
}
const sortedEpisodes = allEpisodes.sort((a: CollectionEntry<'episodes'>, b: CollectionEntry<'episodes'>) =>
  new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
);

const start = (currentPage - 1) * POSTS_PER_PAGE;
const end = start + POSTS_PER_PAGE;
const pageEpisodes = sortedEpisodes.slice(start, end);

const totalPages = Math.ceil(sortedEpisodes.length / POSTS_PER_PAGE);

const paginationItems = Array.from({ length: totalPages }, (_, i) => i + 1)
  .filter((page) =>
    page === 1 ||
    page === totalPages ||
    Math.abs(page - currentPage) <= 1
  )
  .reduce((acc: (number | 'ellipsis')[], page, i, arr) => {
    if (i > 0 && page - (arr[i - 1] as number) > 1) {
      acc.push('ellipsis');
    }
    acc.push(page);
    return acc;
  }, []);
---

<Layout>
  <Fragment slot="head">
    <title>Wedding Photo Hangover Podcast Episodes</title>
    <meta name="description" content="Listen to the latest episodes of the Wedding Photo Hangover podcast. Irreverent takes on wedding photography, satire, and real talk." />
    <link rel="canonical" href="https://weddinghangover.com/episodes/" />
    <meta property="og:title" content="Wedding Photo Hangover Podcast Episodes" />
    <meta property="og:description" content="Catch up on the latest podcast episodes filled with photography tips, satire, and wedding industry banter." />
    <meta property="og:image" content="/images/global/WPH_Wide_CleanNB.webp" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="Wedding Photo Hangover Podcast Episodes" />
    <meta name="twitter:description" content="Irreverent photography talk. Listen now to the Wedding Photo Hangover podcast." />
    <meta name="twitter:image" content="/images/global/WPH_Wide_CleanNB.webp" />
    <link rel="preload" href="/css/blogStyles.css" as="style" onload="this.rel='stylesheet'">
		<noscript><link rel="stylesheet" href="/css/blogStyles.css"></noscript>
    <link rel="preload" as="image" href={heroImg.src} type="image/webp" fetchpriority="high" />
  </Fragment>

  <main>
    <HeroImg 
      title="Podcast Episodes" 
      background={heroImg}
    />
    <div class="content-container">
      <h1 class="blog-title">Good Good Audio</h1>
      <div class="blog-list">
        {pageEpisodes.map((ep: CollectionEntry<'episodes'>) => (
          <div class="blog-card">
            <a href={`/episodes/${ep.slug}/`}>
              <img src={ep.data.image} alt={ep.data.title} class="blog-card-image" />
            </a>
            <div class="blog-card-content">
              <a href={`/episodes/${ep.slug}/`}>
                <h2 class="blog-card-title">{ep.data.title}</h2>
              </a>
              <p class="blog-card-description">{ep.data.description}</p>
              <a href={`/episodes/${ep.slug}/`}>
                <p class="blog-card-date">{ep.data.pubDate.toLocaleDateString()}</p>
              </a>
            </div>
          </div>
        ))}
      </div>

      <nav class="pagination">
        {paginationItems.map((item) =>
          item === 'ellipsis' ? (
            <span class="pagination-ellipsis">…</span>
          ) : (
            <a
              href={`/episodes/${item}/`}
              class={item === currentPage ? 'active' : ''}
            >
              {item}
            </a>
          )
        )}
      </nav>
    </div>
  </main>
</Layout>

